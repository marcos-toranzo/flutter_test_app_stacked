// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_app_test_stacked/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i15;
import 'dart:typed_data' as _i16;
import 'dart:ui' as _i8;

import 'package:flutter/material.dart' as _i7;
import 'package:flutter_app_test_stacked/models/cart_entry.dart' as _i12;
import 'package:flutter_app_test_stacked/models/database_model.dart' as _i14;
import 'package:flutter_app_test_stacked/models/product.dart' as _i10;
import 'package:flutter_app_test_stacked/services/cart_service.dart' as _i11;
import 'package:flutter_app_test_stacked/services/database_service.dart'
    as _i13;
import 'package:flutter_app_test_stacked/services/network_service.dart' as _i2;
import 'package:flutter_app_test_stacked/services/product_service.dart' as _i9;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sqflite/sqflite.dart' as _i4;
import 'package:stacked_services/stacked_services.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeApiResponse_0<T> extends _i1.SmartFake
    implements _i2.ApiResponse<T> {
  _FakeApiResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNetworkResponse_1 extends _i1.SmartFake
    implements _i2.NetworkResponse {
  _FakeNetworkResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_2 extends _i1.SmartFake implements _i3.Response {
  _FakeResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_3 extends _i1.SmartFake
    implements _i3.StreamedResponse {
  _FakeStreamedResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDatabase_4 extends _i1.SmartFake implements _i4.Database {
  _FakeDatabase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_5<T> extends _i1.SmartFake implements _i5.Future<T> {
  _FakeFuture_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeQueryCursor_6 extends _i1.SmartFake implements _i4.QueryCursor {
  _FakeQueryCursor_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBatch_7 extends _i1.SmartFake implements _i4.Batch {
  _FakeBatch_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationService extends _i1.Mock implements _i6.NavigationService {
  @override
  String get previousRoute => (super.noSuchMethod(
        Invocation.getter(#previousRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  String get currentRoute => (super.noSuchMethod(
        Invocation.getter(#currentRoute),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  _i7.GlobalKey<_i7.NavigatorState>? nestedNavigationKey(int? index) =>
      (super.noSuchMethod(
        Invocation.method(
          #nestedNavigationKey,
          [index],
        ),
        returnValueForMissingStub: null,
      ) as _i7.GlobalKey<_i7.NavigatorState>?);
  @override
  void config({
    bool? enableLog,
    bool? defaultPopGesture,
    bool? defaultOpaqueRoute,
    Duration? defaultDurationTransition,
    bool? defaultGlobalState,
    _i6.Transition? defaultTransitionStyle,
    String? defaultTransition,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #config,
          [],
          {
            #enableLog: enableLog,
            #defaultPopGesture: defaultPopGesture,
            #defaultOpaqueRoute: defaultOpaqueRoute,
            #defaultDurationTransition: defaultDurationTransition,
            #defaultGlobalState: defaultGlobalState,
            #defaultTransitionStyle: defaultTransitionStyle,
            #defaultTransition: defaultTransition,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<T?>? navigateWithTransition<T>(
    _i7.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i7.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i6.Transition? transitionClass,
    _i6.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? replaceWithTransition<T>(
    _i7.Widget? page, {
    bool? opaque,
    String? transition = r'',
    Duration? duration,
    bool? popGesture,
    int? id,
    _i7.Curve? curve,
    bool? fullscreenDialog = false,
    bool? preventDuplicates = true,
    _i6.Transition? transitionClass,
    _i6.Transition? transitionStyle,
    String? routeName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWithTransition,
          [page],
          {
            #opaque: opaque,
            #transition: transition,
            #duration: duration,
            #popGesture: popGesture,
            #id: id,
            #curve: curve,
            #fullscreenDialog: fullscreenDialog,
            #preventDuplicates: preventDuplicates,
            #transitionClass: transitionClass,
            #transitionStyle: transitionStyle,
            #routeName: routeName,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  bool back<T>({
    dynamic result,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #back,
          [],
          {
            #result: result,
            #id: id,
          },
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  void popUntil(
    _i7.RoutePredicate? predicate, {
    int? id,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
          {#id: id},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popRepeated(int? popTimes) => super.noSuchMethod(
        Invocation.method(
          #popRepeated,
          [popTimes],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<T?>? navigateTo<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i7.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateTo,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? navigateToView<T>(
    _i7.Widget? view, {
    dynamic arguments,
    int? id,
    bool? opaque,
    _i7.Curve? curve,
    Duration? duration,
    bool? fullscreenDialog = false,
    bool? popGesture,
    bool? preventDuplicates = true,
    _i6.Transition? transition,
    _i6.Transition? transitionStyle,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #navigateToView,
          [view],
          {
            #arguments: arguments,
            #id: id,
            #opaque: opaque,
            #curve: curve,
            #duration: duration,
            #fullscreenDialog: fullscreenDialog,
            #popGesture: popGesture,
            #preventDuplicates: preventDuplicates,
            #transition: transition,
            #transitionStyle: transitionStyle,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? replaceWith<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
    _i7.RouteTransitionsBuilder? transition,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #replaceWith,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
            #transition: transition,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearStackAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearStackAndShowView<T>(
    _i7.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearStackAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearTillFirstAndShow<T>(
    String? routeName, {
    dynamic arguments,
    int? id,
    bool? preventDuplicates = true,
    Map<String, String>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShow,
          [routeName],
          {
            #arguments: arguments,
            #id: id,
            #preventDuplicates: preventDuplicates,
            #parameters: parameters,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? clearTillFirstAndShowView<T>(
    _i7.Widget? view, {
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearTillFirstAndShowView,
          [view],
          {
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
  @override
  _i5.Future<T?>? pushNamedAndRemoveUntil<T>(
    String? routeName, {
    _i7.RoutePredicate? predicate,
    dynamic arguments,
    int? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [routeName],
          {
            #predicate: predicate,
            #arguments: arguments,
            #id: id,
          },
        ),
        returnValueForMissingStub: null,
      ) as _i5.Future<T?>?);
}

/// A class which mocks [BottomSheetService].
///
/// See the documentation for Mockito's code generation for more information.
class MockBottomSheetService extends _i1.Mock
    implements _i6.BottomSheetService {
  @override
  void setCustomSheetBuilders(Map<dynamic, _i6.SheetBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #setCustomSheetBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i6.SheetResponse<dynamic>?> showBottomSheet({
    required String? title,
    String? description,
    String? confirmButtonTitle = r'Ok',
    String? cancelButtonTitle,
    bool? enableDrag = true,
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showBottomSheet,
          [],
          {
            #title: title,
            #description: description,
            #confirmButtonTitle: confirmButtonTitle,
            #cancelButtonTitle: cancelButtonTitle,
            #enableDrag: enableDrag,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i5.Future<_i6.SheetResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i6.SheetResponse<dynamic>?>.value(),
      ) as _i5.Future<_i6.SheetResponse<dynamic>?>);
  @override
  _i5.Future<_i6.SheetResponse<T>?> showCustomSheet<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    bool? barrierDismissible = true,
    bool? isScrollControlled = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
    bool? enableDrag = true,
    Duration? exitBottomSheetDuration,
    Duration? enterBottomSheetDuration,
    bool? ignoreSafeArea,
    bool? useRootNavigator = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomSheet,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #isScrollControlled: isScrollControlled,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
            #enableDrag: enableDrag,
            #exitBottomSheetDuration: exitBottomSheetDuration,
            #enterBottomSheetDuration: enterBottomSheetDuration,
            #ignoreSafeArea: ignoreSafeArea,
            #useRootNavigator: useRootNavigator,
          },
        ),
        returnValue: _i5.Future<_i6.SheetResponse<T>?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.SheetResponse<T>?>.value(),
      ) as _i5.Future<_i6.SheetResponse<T>?>);
  @override
  void completeSheet(_i6.SheetResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeSheet,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DialogService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDialogService extends _i1.Mock implements _i6.DialogService {
  @override
  void registerCustomDialogBuilders(
          Map<dynamic, _i6.DialogBuilder>? builders) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilders,
          [builders],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void registerCustomDialogBuilder({
    required dynamic variant,
    required _i7.Widget Function(
      _i7.BuildContext,
      _i6.DialogRequest<dynamic>,
      dynamic Function(_i6.DialogResponse<dynamic>),
    )? builder,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #registerCustomDialogBuilder,
          [],
          {
            #variant: variant,
            #builder: builder,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<_i6.DialogResponse<dynamic>?> showDialog({
    String? title,
    String? description,
    String? cancelTitle,
    _i8.Color? cancelTitleColor,
    String? buttonTitle = r'Ok',
    _i8.Color? buttonTitleColor,
    bool? barrierDismissible = false,
    _i6.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #buttonTitle: buttonTitle,
            #buttonTitleColor: buttonTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i5.Future<_i6.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i6.DialogResponse<dynamic>?>.value(),
      ) as _i5.Future<_i6.DialogResponse<dynamic>?>);
  @override
  _i5.Future<_i6.DialogResponse<T>?> showCustomDialog<T, R>({
    dynamic variant,
    String? title,
    String? description,
    bool? hasImage = false,
    String? imageUrl,
    bool? showIconInMainButton = false,
    String? mainButtonTitle,
    bool? showIconInSecondaryButton = false,
    String? secondaryButtonTitle,
    bool? showIconInAdditionalButton = false,
    String? additionalButtonTitle,
    bool? takesInput = false,
    _i8.Color? barrierColor = const _i8.Color(2315255808),
    bool? barrierDismissible = false,
    String? barrierLabel = r'',
    dynamic customData,
    R? data,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showCustomDialog,
          [],
          {
            #variant: variant,
            #title: title,
            #description: description,
            #hasImage: hasImage,
            #imageUrl: imageUrl,
            #showIconInMainButton: showIconInMainButton,
            #mainButtonTitle: mainButtonTitle,
            #showIconInSecondaryButton: showIconInSecondaryButton,
            #secondaryButtonTitle: secondaryButtonTitle,
            #showIconInAdditionalButton: showIconInAdditionalButton,
            #additionalButtonTitle: additionalButtonTitle,
            #takesInput: takesInput,
            #barrierColor: barrierColor,
            #barrierDismissible: barrierDismissible,
            #barrierLabel: barrierLabel,
            #customData: customData,
            #data: data,
          },
        ),
        returnValue: _i5.Future<_i6.DialogResponse<T>?>.value(),
        returnValueForMissingStub: _i5.Future<_i6.DialogResponse<T>?>.value(),
      ) as _i5.Future<_i6.DialogResponse<T>?>);
  @override
  _i5.Future<_i6.DialogResponse<dynamic>?> showConfirmationDialog({
    String? title,
    String? description,
    String? cancelTitle = r'Cancel',
    _i8.Color? cancelTitleColor,
    String? confirmationTitle = r'Ok',
    _i8.Color? confirmationTitleColor,
    bool? barrierDismissible = false,
    _i6.DialogPlatform? dialogPlatform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showConfirmationDialog,
          [],
          {
            #title: title,
            #description: description,
            #cancelTitle: cancelTitle,
            #cancelTitleColor: cancelTitleColor,
            #confirmationTitle: confirmationTitle,
            #confirmationTitleColor: confirmationTitleColor,
            #barrierDismissible: barrierDismissible,
            #dialogPlatform: dialogPlatform,
          },
        ),
        returnValue: _i5.Future<_i6.DialogResponse<dynamic>?>.value(),
        returnValueForMissingStub:
            _i5.Future<_i6.DialogResponse<dynamic>?>.value(),
      ) as _i5.Future<_i6.DialogResponse<dynamic>?>);
  @override
  void completeDialog(_i6.DialogResponse<dynamic>? response) =>
      super.noSuchMethod(
        Invocation.method(
          #completeDialog,
          [response],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ProductService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductService extends _i1.Mock implements _i9.ProductService {
  @override
  _i5.Future<_i2.ApiResponse<List<String>>> getCategories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue: _i5.Future<_i2.ApiResponse<List<String>>>.value(
            _FakeApiResponse_0<List<String>>(
          this,
          Invocation.method(
            #getCategories,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<List<String>>>.value(
                _FakeApiResponse_0<List<String>>(
          this,
          Invocation.method(
            #getCategories,
            [],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<List<String>>>);
  @override
  _i5.Future<_i2.ApiResponse<List<_i10.Product>>> getProducts({
    int? limit = 0,
    int? skip = 0,
    String? search = r'',
    List<_i9.ProductField>? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
          {
            #limit: limit,
            #skip: skip,
            #search: search,
            #select: select,
          },
        ),
        returnValue: _i5.Future<_i2.ApiResponse<List<_i10.Product>>>.value(
            _FakeApiResponse_0<List<_i10.Product>>(
          this,
          Invocation.method(
            #getProducts,
            [],
            {
              #limit: limit,
              #skip: skip,
              #search: search,
              #select: select,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<List<_i10.Product>>>.value(
                _FakeApiResponse_0<List<_i10.Product>>(
          this,
          Invocation.method(
            #getProducts,
            [],
            {
              #limit: limit,
              #skip: skip,
              #search: search,
              #select: select,
            },
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<List<_i10.Product>>>);
  @override
  _i5.Future<_i2.ApiResponse<List<_i10.Product>>> getProductsWithIds(
    List<int>? ids, {
    List<_i9.ProductField>? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProductsWithIds,
          [ids],
          {#select: select},
        ),
        returnValue: _i5.Future<_i2.ApiResponse<List<_i10.Product>>>.value(
            _FakeApiResponse_0<List<_i10.Product>>(
          this,
          Invocation.method(
            #getProductsWithIds,
            [ids],
            {#select: select},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<List<_i10.Product>>>.value(
                _FakeApiResponse_0<List<_i10.Product>>(
          this,
          Invocation.method(
            #getProductsWithIds,
            [ids],
            {#select: select},
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<List<_i10.Product>>>);
  @override
  _i5.Future<_i2.ApiResponse<List<_i10.Product>>> getCategoryProducts(
    String? category, {
    int? limit = 0,
    int? skip = 0,
    List<_i9.ProductField>? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCategoryProducts,
          [category],
          {
            #limit: limit,
            #skip: skip,
            #select: select,
          },
        ),
        returnValue: _i5.Future<_i2.ApiResponse<List<_i10.Product>>>.value(
            _FakeApiResponse_0<List<_i10.Product>>(
          this,
          Invocation.method(
            #getCategoryProducts,
            [category],
            {
              #limit: limit,
              #skip: skip,
              #select: select,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<List<_i10.Product>>>.value(
                _FakeApiResponse_0<List<_i10.Product>>(
          this,
          Invocation.method(
            #getCategoryProducts,
            [category],
            {
              #limit: limit,
              #skip: skip,
              #select: select,
            },
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<List<_i10.Product>>>);
  @override
  _i5.Future<_i2.ApiResponse<_i10.Product>> getProduct(
    int? id, {
    List<_i9.ProductField>? select,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProduct,
          [id],
          {#select: select},
        ),
        returnValue: _i5.Future<_i2.ApiResponse<_i10.Product>>.value(
            _FakeApiResponse_0<_i10.Product>(
          this,
          Invocation.method(
            #getProduct,
            [id],
            {#select: select},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<_i10.Product>>.value(
                _FakeApiResponse_0<_i10.Product>(
          this,
          Invocation.method(
            #getProduct,
            [id],
            {#select: select},
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<_i10.Product>>);
}

/// A class which mocks [NetworkService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkService extends _i1.Mock implements _i2.NetworkService {
  @override
  _i5.Future<_i2.NetworkResponse> get(
    String? endpoint, {
    Map<String, dynamic>? params = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [endpoint],
          {#params: params},
        ),
        returnValue:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #get,
            [endpoint],
            {#params: params},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #get,
            [endpoint],
            {#params: params},
          ),
        )),
      ) as _i5.Future<_i2.NetworkResponse>);
  @override
  _i5.Future<_i2.NetworkResponse> post(
    String? endpoint, {
    Map<String, dynamic>? body = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [endpoint],
          {#body: body},
        ),
        returnValue:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #post,
            [endpoint],
            {#body: body},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #post,
            [endpoint],
            {#body: body},
          ),
        )),
      ) as _i5.Future<_i2.NetworkResponse>);
  @override
  _i5.Future<_i2.NetworkResponse> put(
    String? endpoint, {
    Map<String, dynamic>? body = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [endpoint],
          {#body: body},
        ),
        returnValue:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #put,
            [endpoint],
            {#body: body},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #put,
            [endpoint],
            {#body: body},
          ),
        )),
      ) as _i5.Future<_i2.NetworkResponse>);
  @override
  _i5.Future<_i2.NetworkResponse> patch(
    String? endpoint, {
    Map<String, dynamic>? body = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [endpoint],
          {#body: body},
        ),
        returnValue:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #patch,
            [endpoint],
            {#body: body},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #patch,
            [endpoint],
            {#body: body},
          ),
        )),
      ) as _i5.Future<_i2.NetworkResponse>);
  @override
  _i5.Future<_i2.NetworkResponse> delete(String? endpoint) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [endpoint],
        ),
        returnValue:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #delete,
            [endpoint],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.NetworkResponse>.value(_FakeNetworkResponse_1(
          this,
          Invocation.method(
            #delete,
            [endpoint],
          ),
        )),
      ) as _i5.Future<_i2.NetworkResponse>);
}

/// A class which mocks [CartService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartService extends _i1.Mock implements _i11.CartService {
  @override
  int get count => (super.noSuchMethod(
        Invocation.getter(#count),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  List<_i12.CartEntry> get entries => (super.noSuchMethod(
        Invocation.getter(#entries),
        returnValue: <_i12.CartEntry>[],
        returnValueForMissingStub: <_i12.CartEntry>[],
      ) as List<_i12.CartEntry>);
  @override
  int get listenersCount => (super.noSuchMethod(
        Invocation.getter(#listenersCount),
        returnValue: 0,
        returnValueForMissingStub: 0,
      ) as int);
  @override
  _i5.Future<_i2.ApiResponse<List<_i12.CartEntry>>> getEntries() =>
      (super.noSuchMethod(
        Invocation.method(
          #getEntries,
          [],
        ),
        returnValue: _i5.Future<_i2.ApiResponse<List<_i12.CartEntry>>>.value(
            _FakeApiResponse_0<List<_i12.CartEntry>>(
          this,
          Invocation.method(
            #getEntries,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<List<_i12.CartEntry>>>.value(
                _FakeApiResponse_0<List<_i12.CartEntry>>(
          this,
          Invocation.method(
            #getEntries,
            [],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<List<_i12.CartEntry>>>);
  @override
  _i5.Future<_i2.ApiResponse<_i12.CartEntry>> addProduct(int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #addProduct,
          [productId],
        ),
        returnValue: _i5.Future<_i2.ApiResponse<_i12.CartEntry>>.value(
            _FakeApiResponse_0<_i12.CartEntry>(
          this,
          Invocation.method(
            #addProduct,
            [productId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<_i12.CartEntry>>.value(
                _FakeApiResponse_0<_i12.CartEntry>(
          this,
          Invocation.method(
            #addProduct,
            [productId],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<_i12.CartEntry>>);
  @override
  _i5.Future<_i2.ApiResponse<_i12.CartEntry>> removeProduct(int? productId) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeProduct,
          [productId],
        ),
        returnValue: _i5.Future<_i2.ApiResponse<_i12.CartEntry>>.value(
            _FakeApiResponse_0<_i12.CartEntry>(
          this,
          Invocation.method(
            #removeProduct,
            [productId],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<_i12.CartEntry>>.value(
                _FakeApiResponse_0<_i12.CartEntry>(
          this,
          Invocation.method(
            #removeProduct,
            [productId],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<_i12.CartEntry>>);
  @override
  _i5.Future<_i2.ApiResponse<Never>> empty() => (super.noSuchMethod(
        Invocation.method(
          #empty,
          [],
        ),
        returnValue:
            _i5.Future<_i2.ApiResponse<Never>>.value(_FakeApiResponse_0<Never>(
          this,
          Invocation.method(
            #empty,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i2.ApiResponse<Never>>.value(_FakeApiResponse_0<Never>(
          this,
          Invocation.method(
            #empty,
            [],
          ),
        )),
      ) as _i5.Future<_i2.ApiResponse<Never>>);
  @override
  void listenToReactiveValues(List<dynamic>? reactiveValues) =>
      super.noSuchMethod(
        Invocation.method(
          #listenToReactiveValues,
          [reactiveValues],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(void Function()? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i13.DatabaseService {
  @override
  _i5.Future<int> insert({
    required String? tableName,
    required _i14.DatabaseModel? model,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [],
          {
            #tableName: tableName,
            #model: model,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> update({
    required String? tableName,
    required _i14.DatabaseModel? model,
    List<_i13.WhereClause<dynamic>>? whereClauses,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {
            #tableName: tableName,
            #model: model,
            #whereClauses: whereClauses,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> delete({
    required String? tableName,
    List<_i13.WhereClause<dynamic>>? whereClauses,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #tableName: tableName,
            #whereClauses: whereClauses,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<List<Map<String, dynamic>>> get({
    required String? tableName,
    List<String>? columns,
    List<_i13.WhereClause<dynamic>>? whereClauses,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
          {
            #tableName: tableName,
            #columns: columns,
            #whereClauses: whereClauses,
          },
        ),
        returnValue: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
        returnValueForMissingStub: _i5.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i5.Future<List<Map<String, dynamic>>>);
  @override
  _i5.Future<void> open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i3.Client {
  @override
  _i5.Future<_i3.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);
  @override
  _i5.Future<_i3.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i15.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.Response>.value(_FakeResponse_2(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i5.Future<_i3.Response>);
  @override
  _i5.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<String>.value(''),
        returnValueForMissingStub: _i5.Future<String>.value(''),
      ) as _i5.Future<String>);
  @override
  _i5.Future<_i16.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i5.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
        returnValueForMissingStub:
            _i5.Future<_i16.Uint8List>.value(_i16.Uint8List(0)),
      ) as _i5.Future<_i16.Uint8List>);
  @override
  _i5.Future<_i3.StreamedResponse> send(_i3.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i5.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i3.StreamedResponse>.value(_FakeStreamedResponse_3(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i5.Future<_i3.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Database].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabase extends _i1.Mock implements _i4.Database {
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);
  @override
  bool get isOpen => (super.noSuchMethod(
        Invocation.getter(#isOpen),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i4.Database get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _FakeDatabase_4(
          this,
          Invocation.getter(#database),
        ),
        returnValueForMissingStub: _FakeDatabase_4(
          this,
          Invocation.getter(#database),
        ),
      ) as _i4.Database);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<T> transaction<T>(
    _i5.Future<T> Function(_i4.Transaction)? action, {
    bool? exclusive,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #transaction,
          [action],
          {#exclusive: exclusive},
        ),
        returnValue: _FakeFuture_5<T>(
          this,
          Invocation.method(
            #transaction,
            [action],
            {#exclusive: exclusive},
          ),
        ),
        returnValueForMissingStub: _FakeFuture_5<T>(
          this,
          Invocation.method(
            #transaction,
            [action],
            {#exclusive: exclusive},
          ),
        ),
      ) as _i5.Future<T>);
  @override
  _i5.Future<T> devInvokeMethod<T>(
    String? method, [
    Object? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeMethod,
          [
            method,
            arguments,
          ],
        ),
        returnValue: _FakeFuture_5<T>(
          this,
          Invocation.method(
            #devInvokeMethod,
            [
              method,
              arguments,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_5<T>(
          this,
          Invocation.method(
            #devInvokeMethod,
            [
              method,
              arguments,
            ],
          ),
        ),
      ) as _i5.Future<T>);
  @override
  _i5.Future<T> devInvokeSqlMethod<T>(
    String? method,
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #devInvokeSqlMethod,
          [
            method,
            sql,
            arguments,
          ],
        ),
        returnValue: _FakeFuture_5<T>(
          this,
          Invocation.method(
            #devInvokeSqlMethod,
            [
              method,
              sql,
              arguments,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeFuture_5<T>(
          this,
          Invocation.method(
            #devInvokeSqlMethod,
            [
              method,
              sql,
              arguments,
            ],
          ),
        ),
      ) as _i5.Future<T>);
  @override
  _i5.Future<void> execute(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  _i5.Future<int> rawInsert(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawInsert,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> insert(
    String? table,
    Map<String, Object?>? values, {
    String? nullColumnHack,
    _i4.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [
            table,
            values,
          ],
          {
            #nullColumnHack: nullColumnHack,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<List<Map<String, Object?>>> query(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #query,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
          },
        ),
        returnValue: _i5.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub: _i5.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i5.Future<List<Map<String, Object?>>>);
  @override
  _i5.Future<List<Map<String, Object?>>> rawQuery(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQuery,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i5.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
        returnValueForMissingStub: _i5.Future<List<Map<String, Object?>>>.value(
            <Map<String, Object?>>[]),
      ) as _i5.Future<List<Map<String, Object?>>>);
  @override
  _i5.Future<_i4.QueryCursor> rawQueryCursor(
    String? sql,
    List<Object?>? arguments, {
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawQueryCursor,
          [
            sql,
            arguments,
          ],
          {#bufferSize: bufferSize},
        ),
        returnValue: _i5.Future<_i4.QueryCursor>.value(_FakeQueryCursor_6(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i4.QueryCursor>.value(_FakeQueryCursor_6(
          this,
          Invocation.method(
            #rawQueryCursor,
            [
              sql,
              arguments,
            ],
            {#bufferSize: bufferSize},
          ),
        )),
      ) as _i5.Future<_i4.QueryCursor>);
  @override
  _i5.Future<_i4.QueryCursor> queryCursor(
    String? table, {
    bool? distinct,
    List<String>? columns,
    String? where,
    List<Object?>? whereArgs,
    String? groupBy,
    String? having,
    String? orderBy,
    int? limit,
    int? offset,
    int? bufferSize,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #queryCursor,
          [table],
          {
            #distinct: distinct,
            #columns: columns,
            #where: where,
            #whereArgs: whereArgs,
            #groupBy: groupBy,
            #having: having,
            #orderBy: orderBy,
            #limit: limit,
            #offset: offset,
            #bufferSize: bufferSize,
          },
        ),
        returnValue: _i5.Future<_i4.QueryCursor>.value(_FakeQueryCursor_6(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
        returnValueForMissingStub:
            _i5.Future<_i4.QueryCursor>.value(_FakeQueryCursor_6(
          this,
          Invocation.method(
            #queryCursor,
            [table],
            {
              #distinct: distinct,
              #columns: columns,
              #where: where,
              #whereArgs: whereArgs,
              #groupBy: groupBy,
              #having: having,
              #orderBy: orderBy,
              #limit: limit,
              #offset: offset,
              #bufferSize: bufferSize,
            },
          ),
        )),
      ) as _i5.Future<_i4.QueryCursor>);
  @override
  _i5.Future<int> rawUpdate(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawUpdate,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> update(
    String? table,
    Map<String, Object?>? values, {
    String? where,
    List<Object?>? whereArgs,
    _i4.ConflictAlgorithm? conflictAlgorithm,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            table,
            values,
          ],
          {
            #where: where,
            #whereArgs: whereArgs,
            #conflictAlgorithm: conflictAlgorithm,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> rawDelete(
    String? sql, [
    List<Object?>? arguments,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #rawDelete,
          [
            sql,
            arguments,
          ],
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i5.Future<int> delete(
    String? table, {
    String? where,
    List<Object?>? whereArgs,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [table],
          {
            #where: where,
            #whereArgs: whereArgs,
          },
        ),
        returnValue: _i5.Future<int>.value(0),
        returnValueForMissingStub: _i5.Future<int>.value(0),
      ) as _i5.Future<int>);
  @override
  _i4.Batch batch() => (super.noSuchMethod(
        Invocation.method(
          #batch,
          [],
        ),
        returnValue: _FakeBatch_7(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeBatch_7(
          this,
          Invocation.method(
            #batch,
            [],
          ),
        ),
      ) as _i4.Batch);
}
